@model SurveyWeb.Controllers.QuestionCreateViewModel
@{
    ViewData["Title"] = "Thêm câu hỏi";
}

<div class="max-w-3xl mx-auto p-6">
    <h1 class="text-xl font-bold text-gray-900 mb-4">Thêm câu hỏi mới</h1>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm mb-4">
            <strong>Có lỗi xảy ra:</strong>
            <ul class="list-disc list-inside mt-2">
                @foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                { <li>@error.ErrorMessage</li> }
            </ul>
        </div>
    }

    <form asp-action="Create" asp-route-surveyId="@Model.SurveyId" method="post" class="space-y-5 bg-white border border-gray-200 rounded-lg shadow p-5">
        @Html.AntiForgeryToken()
        <input type="hidden" id="QuestionTypeCode" name="QuestionTypeCode" />

        <div class="text-sm text-gray-500">Khảo sát: <span class="font-medium text-gray-900">@Model.SurveyTitle</span></div>

        <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Nội dung câu hỏi</label>
            <input name="Text" value="@Model.Text" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
        </div>

        <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Loại câu hỏi</label>
            <select id="QuestionTypeId" name="QuestionTypeId" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option value="">-- Chọn loại câu hỏi --</option>
                @foreach (var t in Model.AvailableTypes)
                {
                    if (Model.QuestionTypeId.HasValue && Model.QuestionTypeId.Value == t.Id)
                    {
                        <option value="@t.Id" data-code="@t.Code" data-name="@t.Name" data-supports-options="@(t.SupportsOptions.ToString().ToLowerInvariant())" selected="selected">@t.Name</option>
                    }
                    else
                    {
                        <option value="@t.Id" data-code="@t.Code" data-name="@t.Name" data-supports-options="@(t.SupportsOptions.ToString().ToLowerInvariant())">@t.Name</option>
                    }
                }
            </select>
            <div class="text-[11px] text-gray-400 leading-snug">Ví dụ: Multiple Choice, Rating, Slider, Date, Upload, Matrix...</div>
        </div>

        <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Thứ tự (OrderNo)</label>
            <input name="OrderNo" type="number" value="@(Model.OrderNo == 0 ? 1 : Model.OrderNo)" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            <span class="text-red-600 text-xs">@ViewData.ModelState["OrderNo"]?.Errors.FirstOrDefault()?.ErrorMessage</span>
        </div>

        <div class="space-y-1">
            <label class="block text-sm font-medium text-gray-700">Bắt buộc trả lời?</label>
            <select name="IsRequired" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                @if (Model.IsRequired)
                { <option value="false">Không</option><option value="true" selected>Có</option> }
                else
                { <option value="false" selected>Không</option><option value="true">Có</option> }
            </select>
        </div>

        <div id="optionsPanel" class="space-y-2 hidden">
            <label class="block text-sm font-medium text-gray-700">Các lựa chọn</label>
            <div id="optionsContainer" class="space-y-2">
                @{
                    var existingOptions = (Model.Options ?? new List<SurveyWeb.Controllers.QuestionOptionItem>()).OrderBy(o => o.OrderNo).ToList();
                    if (existingOptions.Count == 0)
                    {
                        existingOptions = new List<SurveyWeb.Controllers.QuestionOptionItem>
                        {
                            new() { OrderNo = 1, Text = "" },
                            new() { OrderNo = 2, Text = "" }
                        };
                    }
                    for (int i = 0; i < existingOptions.Count; i++)
                    {
                        <div class="flex gap-2 items-center option-row" data-index="@i">
                            <input type="text" name="Options[@i]" value="@existingOptions[i].Text" class="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Nhập lựa chọn @(@i + 1)" />
                            <button type="button" class="remove-option px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-100">Xóa</button>
                        </div>
                    }
                }
            </div>
            <div><button id="addOptionBtn" type="button" class="mt-1 bg-indigo-600 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-indigo-700">+ Thêm lựa chọn</button></div>
            <div class="text-[11px] text-gray-400 leading-snug">Dùng cho Multiple Choice, Checkboxes, Dropdown, Rank Order, Rate the Choice, Rating Checkbox, Multi-level Dropdown, Constant Sum...</div>
        </div>

        <div id="numericPanel" class="grid grid-cols-1 md:grid-cols-3 gap-4 hidden">
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Giá trị nhỏ nhất (Min)</label>
                <input name="MinValue" type="number" step="any" value="@(Model.MinValue?.ToString(System.Globalization.CultureInfo.InvariantCulture))" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Giá trị lớn nhất (Max)</label>
                <input name="MaxValue" type="number" step="any" value="@(Model.MaxValue?.ToString(System.Globalization.CultureInfo.InvariantCulture))" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Bước nhảy (Step)</label>
                <input name="Step" type="number" step="any" value="@(Model.Step?.ToString(System.Globalization.CultureInfo.InvariantCulture))" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div class="col-span-full text-[11px] text-gray-400 leading-snug">Dùng cho Rating/Slider/Number/NPS.</div>
        </div>

        <div id="maxCharsPanel" class="space-y-1 hidden">
            <label class="block text-sm font-medium text-gray-700">Giới hạn ký tự (Max chars)</label>
            <input name="MaxChars" type="number" value="@(Model.MaxChars?.ToString() ?? "")" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            <div class="text-[11px] text-gray-400 leading-snug">Dùng cho Single/Multiple Textbox, Email, Mobile Phone, Name, Address,...</div>
        </div>

        <div id="uploadPanel" class="grid grid-cols-1 md:grid-cols-3 gap-4 hidden">
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Allowed MIME(s)</label>
                <input name="AllowedMime" type="text" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="image/*,application/pdf" />
            </div>
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Max files</label>
                <input name="MaxFiles" type="number" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
            <div class="space-y-1">
                <label class="block text-sm font-medium text-gray-700">Max size (MB)</label>
                <input name="MaxFileSizeMB" type="number" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" />
            </div>
        </div>

        <div id="matrixPanel" class="space-y-2 hidden">
            <label class="block text-sm font-medium text-gray-700">Matrix/Table cấu hình (JSON)</label>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div class="space-y-1 md:col-span-1">
                    <label class="block text-sm text-gray-600">Rows JSON</label>
                    <textarea name="MatrixRowsJson" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                </div>
                <div class="space-y-1 md:col-span-1">
                    <label class="block text-sm text-gray-600">Cols JSON</label>
                    <textarea name="MatrixColsJson" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                </div>
                <div class="space-y-1 md:col-span-1">
                    <label class="block text-sm text-gray-600">Scale/Labels JSON</label>
                    <textarea name="ScaleLabelsJson" rows="3" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500"></textarea>
                </div>
            </div>
        </div>

        <div id="aiPanel" class="space-y-1 hidden">
            <label class="block text-sm font-medium text-gray-700">AI Probing</label>
            <select name="AiProbeEnabled" class="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500">
                <option value="false" selected>Tắt</option>
                <option value="true">Bật</option>
            </select>
        </div>

        <div class="flex justify-end gap-3 pt-4">
            <a href="@Url.Action("List","Question", new { surveyId = Model.SurveyId })" class="px-4 py-2 rounded-lg border border-gray-300 text-gray-700 text-sm hover:bg-gray-100">Hủy</a>
            <button type="submit" class="bg-indigo-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-indigo-700">Lưu câu hỏi</button>
        </div>
    </form>
</div>

@section Scripts {
<script>
(function () {
    const typeSelect = document.getElementById('QuestionTypeId');
    const codeHidden = document.getElementById('QuestionTypeCode');

    const optionsPanel = document.getElementById('optionsPanel');
    const numericPanel = document.getElementById('numericPanel');
    const maxCharsPanel = document.getElementById('maxCharsPanel');
    const uploadPanel = document.getElementById('uploadPanel');
    const matrixPanel = document.getElementById('matrixPanel');
    const aiPanel = document.getElementById('aiPanel');

    const optionsContainer = document.getElementById('optionsContainer');
    const addOptionBtn = document.getElementById('addOptionBtn');

    function slugify(s){return (s||'').toString().trim().toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g,'').replace(/[^a-z0-9]+/g,'-').replace(/(^-|-$)+/g,'');}

    const optionCodes = new Set(['multiple-choice','checkboxes','dropdown','rank-order','rate-the-choice','rating-checkbox','single-choice','multi-level-dropdown','constant-sum','table-dropdown']);
    const numericCodes = new Set(['rating','slider','number','nps','nps®','nps-','nps10']);
    const textCodes = new Set(['single-textbox','multiple-textbox','text','textarea','name','basic-information','gender','age-group','mobile-phone','email','education','marital-status','country-and-region','occupation','address','table-text','matrix-text','matrix-text-alt']);
    const uploadCodes = new Set(['upload','file-upload']);
    const matrixCodes = new Set(['matrix-radio','matrix-checkbox','matrix-rating','matrix-slider','matrix-text','matrix-text-alt']);
    const tableCodes = new Set(['table-text','table-values','table-dropdown','table-combination','auto-increment-table']);
    const aiCodes = new Set(['ai-probing','media-ai-recognition']);

    function key() {
        const sel = typeSelect.options[typeSelect.selectedIndex];
        if (!sel) return '';
        const code = sel.getAttribute('data-code') || '';
        if (code) return slugify(code);
        const name = sel.getAttribute('data-name') || sel.textContent || '';
        return slugify(name);
    }

    function toggle(node, show){ node.classList.toggle('hidden', !show); }

    function togglePanels() {
        const k = key();
        codeHidden.value = k;
        const supportsOptions = (typeSelect.options[typeSelect.selectedIndex]?.getAttribute('data-supports-options') === 'true');

        toggle(optionsPanel, supportsOptions || optionCodes.has(k));
        toggle(numericPanel, numericCodes.has(k));
        toggle(maxCharsPanel, textCodes.has(k));
        toggle(uploadPanel, uploadCodes.has(k));
        toggle(matrixPanel, matrixCodes.has(k) || tableCodes.has(k));
        toggle(aiPanel, aiCodes.has(k));

        if (k.startsWith('nps')) {
            const minEl = document.querySelector('input[name="MinValue"]');
            const maxEl = document.querySelector('input[name="MaxValue"]');
            const stepEl = document.querySelector('input[name="Step"]');
            if (minEl && !minEl.value) minEl.value = '0';
            if (maxEl && !maxEl.value) maxEl.value = '10';
            if (stepEl && !stepEl.value) stepEl.value = '1';
        }
    }

    function reindexOptions(){
        document.querySelectorAll('.option-row').forEach((row, idx)=>{
            const input = row.querySelector('input[type="text"]');
            if (input) { input.name = `Options[${idx}]`; input.placeholder = `Nhập lựa chọn ${idx + 1}`; }
        });
    }

    function addOptionRow(val){
        const idx = document.querySelectorAll('.option-row').length;
        const row = document.createElement('div');
        row.className = 'flex gap-2 items-center option-row';
        row.innerHTML = `
            <input type="text" name="Options[${idx}]" value="${val || ''}" class="flex-1 border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Nhập lựa chọn ${idx + 1}" />
            <button type="button" class="remove-option px-3 py-2 border border-gray-300 rounded-lg text-sm hover:bg-gray-100">Xóa</button>`;
        optionsContainer.appendChild(row);
    }

    if (addOptionBtn) addOptionBtn.addEventListener('click', ()=>{ addOptionRow(''); reindexOptions(); });
    document.addEventListener('click', (e)=>{ if (e.target && e.target.classList.contains('remove-option')) { e.target.closest('.option-row').remove(); reindexOptions(); }});

    typeSelect.addEventListener('change', togglePanels);
    togglePanels();
})();
</script>
}
